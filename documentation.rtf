{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf100
{\fonttbl\f0\froman\fcharset0 TimesNewRomanPS-BoldMT;\f1\fnil\fcharset0 TrebuchetMS;\f2\fswiss\fcharset0 Helvetica-Bold;
\f3\ftech\fcharset77 Symbol;\f4\fswiss\fcharset0 Helvetica-LightOblique;\f5\fswiss\fcharset0 Helvetica-Light;
}
{\colortbl;\red255\green255\blue255;\red91\green26\blue142;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c43922\c18824\c62745;\cssrgb\c0\c0\c0;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}}
\paperw11900\paperh16840\margl1417\margr1417\margb1417\margt1417
\deftab708
\pard\pardeftab708\sl360\slmult1\qc\partightenfactor0

\f0\b\fs28 \cf2 \expnd0\expndtw0\kerning0
\up0 \nosupersub \ulnone \outl0\strokewidth0 \strokec2 Project Part 1 \'96 Interpreter in Python\
Friday 30 March 2018\
\pard\pardeftab708\sl360\slmult1\sa160\partightenfactor0

\f1\b0\fs22 \cf3 \strokec3 \
\pard\pardeftab708\sl360\slmult1\sa160\partightenfactor0

\f2\b\fs24 \cf3 \ul \ulc3 \strokec3 Project Objectives:\
\pard\tx360\tx720\pardeftab708\li720\fi-720\sl360\slmult1\sa160\partightenfactor0
\ls1\ilvl0
\f3\b0 \cf3 \kerning1\expnd0\expndtw0 \up0 \nosupersub \ulnone \outl0\strokewidth0 {\listtext	\uc0\u8226 	}
\f4\i \cf3 \expnd0\expndtw0\kerning0
\up0 \nosupersub \ulnone \outl0\strokewidth0 \strokec3 Direct Implementation to AL: \
\pard\pardeftab708\fi360\sl360\slmult1\sa160\partightenfactor0

\f5\i0 \cf3 \strokec3 This program takes as input the program files from assignment1, translated into AL. AL Programs have a unique form of data declaration: \'93INT  NAME size svvvvvvvvvv\'94 where the name of the variable is handled to be an alphanumeric variable written in an upper case: (use of the BNF grammar to create a regular expression as identifier (letter)(letter|digit)(letter|digit)(letter|digit) ). These variables declared could have values. In the parsing phase, the data declaration memory is handled as a symbol table which uses a python dictionary to do the job. Then there is the program that uses the same operations the PCL language; however, these op-codes have a symbol table too, implemented using a python dictionary to know where and when to assign, add, subtract, multiply, divide, square, square root, equal, not equal, greater than or equal, less than read/ write array, iterative jump, read/ write input and stop. The branching in this language is handled as a label table also implemented as a dictionary. If the parser finds a label before the op-code it appends it to the label table with its location in the program, if not it just skips straight to the op-code. Also, here too we take constants in the program part not as memory locations but as integers so 0023 means the number 23. Lastly the input part is just kept the same. We use he op-code \'93READ\'94 to go through the input\
\pard\tx360\tx720\pardeftab708\li720\fi-720\sl360\slmult1\sa160\partightenfactor0
\ls2\ilvl0
\f3 \cf3 \kerning1\expnd0\expndtw0 \up0 \nosupersub \ulnone \outl0\strokewidth0 {\listtext	\uc0\u8226 	}
\f4\i \cf3 \expnd0\expndtw0\kerning0
\up0 \nosupersub \ulnone \outl0\strokewidth0 \strokec3 Assembling of AL into PCL:\
\pard\pardeftab708\sl360\slmult1\sa160\partightenfactor0

\f5\i0 \cf3 \strokec3 In this part of the project we take input from the file in the form of assembly like language that is described in the section above. The examples used in the input file are all translated from the first assignment. So the first part we use the parsing function to take each elements of the data declaration \'93INT  NAME size svvvvvvvvvv\'94 and keeps its location stored along with the value of the variable and its name in a separate python list used to translate and replace them with the syntax of PCL \'93+0 000\'a0000\'a0000\'94 then adding \'93+9\'a0999\'a0999 999\'94 at the end of data declaration part and in the end of the program memory part. We handled constants in the program memory part by taking the operand and appending them to the data declaration list by saving the location of each one of them. Also, whenever the program finds a label take it and store it in a separate list (label table) and memorize the location of this label to change it in the branching operation in the third operand, for the op-code that represent operation we used two python dictionaries one for the AL op code and the other one for the PCL op codes. And whenever the parser takes an op code it changes it with the appropriate op code from the dictionary. The operands are changed from their semantic representation to the memory location it represent in the data declaration part, then we add at the end of the program memory part the code \'93+9\'a0999\'a0999 999\'94 to separate it from the input memory part. Lastly the input part is just kept the same we use to read from it the input using the translated op code \'93READ\'94 to \'93+8\'94. \
\pard\tx360\tx720\pardeftab708\li720\fi-720\sl360\slmult1\sa160\partightenfactor0
\ls3\ilvl0
\f3 \cf3 \kerning1\expnd0\expndtw0 \up0 \nosupersub \ulnone \outl0\strokewidth0 {\listtext	\uc0\u8226 	}
\f4\i \cf3 \expnd0\expndtw0\kerning0
\up0 \nosupersub \ulnone \outl0\strokewidth0 \strokec3 Interpretation of PCL:\
\pard\pardeftab708\fi360\sl360\slmult1\sa160\partightenfactor0

\f5\i0 \cf3 \strokec3 The program that we made takes a file as an input file where there is a series of programs made in the first assignment as they are in the pseudo like language. The data declaration part is used to declare memory location that we can refer to in the program part. So we use the same syntax of declaration for all of them \'93+0 000\'a0000 000\'94 with adding comments to the side in order to differentiate between them and the program would be somehow readable. The data declaration stops when the parser find the code \'93+9\'a0999\'a0999 999\'94 move the list of program_memory[] without keeping the separation code. In the program part we chose to not use labels table because we need to declare it first then use it which will just take time and memory to do it, when we can do the branching directly without using labels declaration and labels table. So the op code uses two principle symmetry and orthogonality to digits that varies from 0 to 9 and each one of them have a specific operation: assign, add, subtract, multiply, divide, square, square root, equal, not equal, greater than or equal, less than read/ write array, iterative jump, read/ write input and stop. Implemented using a python dictionary as a symbol table to ease its access when passed to the function that handles the parsing. Operands in this type of language do not support direct number constant all of them are memory locations declared in the data declaration part of the program. We finish it by taking the code \'93+9\'a0999\'a0999\'a0999\'94 and get rid of it from the parser to move into input_memory[]. Lastly the input part is just kept the same we use to read from it the input using the op-code \'93+8\'94.\
\pard\pardeftab708\sl360\slmult1\sa160\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab708\sl360\slmult1\sa160\partightenfactor0

\f2\b \cf3 \ul \ulc3 \strokec3 Notes:\
\pard\tx360\tx720\pardeftab708\li720\fi-720\sl360\slmult1\sa160\partightenfactor0
\ls4\ilvl0
\f3\b0 \cf3 \kerning1\expnd0\expndtw0 \up0 \nosupersub \ulnone \outl0\strokewidth0 {\listtext	\uc0\u8226 	}
\f5 \cf3 \expnd0\expndtw0\kerning0
\up0 \nosupersub \ulnone \outl0\strokewidth0 \strokec3 Our programs respect all the requirements\
\ls4\ilvl0
\f3 \cf3 \kerning1\expnd0\expndtw0 \up0 \nosupersub \ulnone \outl0\strokewidth0 {\listtext	\uc0\u8226 	}
\f5 \cf3 \expnd0\expndtw0\kerning0
\up0 \nosupersub \ulnone \outl0\strokewidth0 \strokec3 Thank you for giving me one of my favorite assignments at AUI}