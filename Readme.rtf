{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf100
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Files Description:\
GitHub-repository: {\field{\*\fldinst{HYPERLINK "https://github.com/Concert0/Languages-Compilers-_Assignment"}}{\fldrslt https://github.com/Concert0/Languages-Compilers-_Assignment}}\
\
-AL_Interpreter.py: Is the assembly-like language interpreter\
	-How to run: python3 AL_Interpreter  (Change input in line 230)\
	- Output generated in outpulAL.txt\
\
\
-AL2PCL.py: Is the \'91Compiler\'92 from AL to PCL\
	-How to run: python3 AL2PCL.py\
	-Input: One of the text files in the ALfiles Directory (Change in line 55)\
	-Output is written to a file called al2pcl.txt\
\
-PCL_Interpreter.py: Is the PCL interpreter\
	-How to run: python3 PCL_Interpreter\
	-input: al2pcl.txt\
	- Output generated in outpulPCL.txt\
\
-main.sh: shell command that runs both AL2PCL(translation) and PCL_Interpreter.\
	-How to run: bash main.sh\
\
-symbols&constants.txt: file that holds values of the constants and variables used in AL so that they can be retrieved when loading the PCL code\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
Things to submit:\
\
-Direct Interpreter of AL: AL_Interpreter.py\
-Assembling Al to PCL: AL2PCL.py\
-Interpretation of PCL: PCL_Interpreter.py\
-Documentation: Documentation.txt (for all files above)\
-Programs in AL: (1,2,3,4) ALfiles Directory. We did not correct the old PCL files we have submitted because they were correct.\
\
-Choice for handling Symbol Table & Label table:\
We opted for option b. Our labels are handled/generated during the translation because we think that it\'92s closer to what happens during \'91compilation\'92. The idea is to have easier tasks to do as we move closer to computer language. On problem we have faced is dealing with numerical values and constants during the translation process. We ended up generating a file that holds those values (symbols&constants.txt). Even though we generate the memory locations during the translation, we only pass the values when PCL_Interpreter is loaded. We think that this was is better because it\'92s a fast way to access data.\
\
}